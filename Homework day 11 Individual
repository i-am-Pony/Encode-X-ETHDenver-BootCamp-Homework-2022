// Although Contract will deploy and pass tests, I do believe it can be improved,
// and will be updating. See WIP "Eternia" for better solution.


// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "./VolcanoCoin.sol";

contract VolcanoCoinNFT is ERC721, Ownable {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

constructor() ERC721("VolcanoCoinNFT", "VOLC") {}

uint256 public constant MAX_SUPPLY = 10000;
uint256 public constant ETHCOST = 0.01 ether;
uint256 public constant VOLCCOST = 100;

   function _baseURI() internal pure override returns (string memory) {
        return "ipfs://bafkreidqfknauwcrid22u42dhb42qjth7gh6unw5vwudzzs3pzb7xub6zu";
    }

   function mint() public payable {
       require(msg.value >= ETHCOST, "Insufficient funds");
       require (MAX_SUPPLY >= _tokenIds.current(), "You cannot mint anymore");
       _tokenIds.increment();
       _safeMint(msg.sender, _tokenIds.current());
    }
    
    function mint2() public payable {
       require(msg.value >= VOLCCOST, "Insufficient funds");
       require (MAX_SUPPLY >= _tokenIds.current(), "You cannot mint anymore");
       _tokenIds.increment();
       _safeMint(msg.sender, _tokenIds.current());
    }
    
    }
